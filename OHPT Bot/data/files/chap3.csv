Chapter⌘Page⌘Text
3⌘0⌘Chapter 3 Decompositions ofgraphs 3.1 Why graphs? Awide range ofproblems canbeexpressed with clarity andprecision intheconcise pictorial language ofgraphs .Forinstance ,consider thetask ofcoloring apolitical map.What isthe minimum number ofcolors needed, with theobvious restriction that neighboring countries should havedifferent colors? One ofthedifculties inattac king thisproblem isthat themap itself ,even astripped-down version like Figure 3.1(a), isusually cluttered with irrelevant information: intricate boundaries ,border posts where three ormore countries meet, open seas,and meandering rivers .Suchdistractions areabsent from themathematical object of Figure 3.1(b), agraph with onevertex foreachcountry (1isBrazil, 11isArgentina) andedges between neighbors .Itcontains exactly theinformation needed forcoloring ,andnothing more . The precise goal isnow toassign acolor toeachvertex sothat noedge hasendpoints ofthe same color . Graph coloring isnottheexclusive domain ofmap designers .Suppose auniversity needs toschedule examinations forallitsclasses and wants tousethefewest time slots possible . Theonly constraint isthat twoexams cannot bescheduled concurrently ifsome student will betaking both ofthem. Toexpress thisproblem asagraph, useonevertex foreachexam and putanedge between twovertices ifthere isaconict, that is,ifthere issomebody taking both endpoint exams .Think ofeachtime slotashaving itsown color .Then, assigning time slots is exactly thesame ascoloring thisgraph! Some basic operations ongraphs arise with suchfrequency ,andinsuchadiversity ofcon- texts ,that alotofeffort hasgone into nding efcient procedures forthem. This chapter is devoted tosome ofthemost fundamental ofthese algorithmsthose that uncover thebasic connectivity structure ofagraph. Formally ,agraph isspecied byasetofvertices (also called nodes )Vand byedgesE between select pairs ofvertices .Inthemap example ,V=f1;2;3;:::;13gandEincludes , among many other edges ,f1;2g;f9;11g,andf7;13g.Here anedge betweenxandyspecically means xshares aborder withy.This isasymmetric relationit implies also thatyshares aborder withxand wedenote itusing setnotation,e=fx;yg.Suchedges areundirected 91
3⌘1⌘92 Algorithms Figure 3.1(a)Amap and(b)itsgraph. (a) (b) 2 34 5 6 1218 7 9 13 1110 andarepart ofanundirected graph . Sometimes graphs depict relations that donothavethis reciprocity ,inwhic hcase itis necessary touseedges with directions onthem. There canbedirected edgesefromxtoy (writtene=(x;y)),orfromytox(written (y;x)),orboth. Aparticularly enormous example ofadirected graph isthegraph ofalllinks intheWorld WideWeb.Ithasavertex foreach siteontheInternet, andadirected edge(u;v)whenever siteuhasalink tositev:intotal, billions ofnodes andedges! Understanding even themost basic connectivity properties ofthe Webisofgreat economic andsocial interest. Although thesize ofthis problem isdaunting , wewillsoon seethat alotofvaluable information about thestructure ofagraph can, happily , bedetermined injustlinear time. 3.1.1 How isagraph represented? Wecanrepresent agraph byanadjacency matrix ;ifthere aren=jVjverticesv1;:::;vn,this isannnarraywhose (i;j)thentry is aij=1ifthere isanedge fromvitovj 0otherwise . Forundirected graphs ,thematrix issymmetric since anedgefu;vgcanbetaken ineither direction. The biggest convenience ofthis format isthat thepresence ofaparticular edge canbe checkedinconstant time,with justonememory access .Ontheother hand thematrix takes
3⌘2⌘S.Dasgupta, C.H.Papadimitriou, andU.V.Vazirani 93 upO(n2)space ,whic hiswasteful ifthegraph does nothavevery many edges . Analternative representation, with sizeproportional tothenumber ofedges ,istheadja- cency list.Itconsists ofjVjlinked lists,onepervertex. Thelinked listforvertexuholds the names ofvertices towhic huhasanoutgoing edgethat is,verticesvforwhic h(u;v)2E. Therefore ,eachedge appears inexactly oneofthelinked lists ifthegraph isdirected ortwo ofthelists ifthegraph isundirected. Either way,thetotal sizeofthedata structure isO(jEj). Chec king foraparticular edge(u;v)isnolonger constant time,because itrequires sifting throughu'sadjacency list. Butitiseasy toiterate through allneighbors ofavertex (byrun- ning down thecorresponding linked list), and, asweshall soon see,thisturns outtobeavery useful operation ingraph algorithms .Again, forundirected graphs ,thisrepresentation hasa symmetry ofsorts:visinu'sadjacency listifandonly ifuisinv'sadjacency list. How bigisyour graph? Whic hofthetworepresentations ,adjacency matrix oradjacency list,isbetter? Well,itde- pends ontherelationship betweenjVj,thenumber ofnodes inthegraph, andjEj,thenum- berofedges .jEjcanbeassmall asjVj(ifitgets muchsmaller ,then thegraph degenerates forexample ,hasisolated vertices), oraslarge asjVj2(when allpossible edges arepresent). WhenjEjisclose totheupper limit ofthis range ,wecallthegraph dense .Attheother extreme ,ifjEjisclose tojVj,thegraph issparse.Asweshall seeinthis chapter and the next twochapters ,exactl ywherejEjliesinthisrange isusuall yacrucial factor inselecting theright graph algorithm . Or,forthat matter ,inselecting thegraph representation. IfitistheWorld WideWeb graph that wewish tostore incomputer memory ,weshould think twice before using an adjacency matrix: atthetime ofwriting ,searc hengines know ofabout eight billion vertices ofthis graph, andhence theadjacency matrix would take updozens ofmillions ofterabits . Again atthetime wewrite these lines ,itisnotclearthat there isenough computer memory inthewhole world toachieve this.(And waiting afewyears until there isenough memory isunwise: theWebwillgrow tooandwillprobably grow faster .) Withadjacency lists,representing theWorld WideWebbecomes feasible: there areonly afewdozen billion hyperlinks intheWeb,andeachwilloccupy afewbytes intheadjacency list. Youcancarry adevice that stores theresult, aterabyte ortwo,inyour pocket(itmay soon tinyour earring ,butbythat time theWebwillhavegrown too). Thereason why adjacency lists aresomuchmore effective inthecase oftheWorld Wide Webisthat theWebisvery sparse: theaverage Webpage hashyperlinks toonly about half adozen other pages ,outofthebillions ofpossibilities . 3.2 Depth-rst search inundirected graphs 3.2.1 Exploring mazes Depth-r stsearc hisasurprisingly versatile linear -time procedure that reveals awealth of information about agraph. Themost basic question itaddresses is,
3⌘3⌘94 Algorithms Figure 3.2Exploring agraph israther likenavigating amaze . A CB FD H I J KE G LH G D ACFKL J IB E What parts ofthegraph arereachable from agiven vertex? Tounderstand thistask, tryputting yourself intheposition ofacomputer that hasjustbeen given anew graph, sayintheform ofanadjacency list. This representation offers just one basic operation: nding theneighbors ofavertex. Withonly this primitive ,thereachability problem israther likeexploring alabyrinth (Figure 3.2). Youstart walking from axed place andwhenever youarrive atanyjunction (vertex) there areavariety ofpassages (edges) you canfollow .Acareless choice ofpassages might lead youaround incirclesormight cause you tooverlook some accessible part ofthemaze .Clearly ,youneed torecord some intermediate information during exploration. This classic challenge hasamused people forcenturies .Everybody knows that allyou need toexplore alabyrinth isaballofstring andapiece ofchalk. Thechalk prevents looping , bymarking thejunctions youhavealready visited. The string alwaystakes youbacktothe starting place ,enabling youtoreturn topassages that youpreviously sawbutdidnotyet investigate . How canwesimulate these twoprimitives ,chalk and string ,onacomputer? The chalk marks areeasy: foreachvertex, maintain aBoolean variable indicating whether ithasbeen visited already .Asfortheballofstring ,thecorrect cyberanalog isastack.After all,theexact role ofthestring istooffer twoprimitive operations unwind togettoanew junction (the stackequivalent istopush thenew vertex) andrewind toreturn totheprevious junction (pop thestack). Instead ofexplicitly maintaining astack,wewill dosoimplicitly viarecursion (whic h isimplemented using astackofactivation records). The resulting algorithm isshown in Figure 3.3.1Theprevisit andpostvisit procedures areoptional, meant forperforming operations onavertex when itisrst discovered and also when itisbeing leftforthelast time.Wewillsoon seesome creative uses forthem. 1Aswith many ofourgraph algorithms ,thisoneapplies toboth undirected anddirected graphs .Insuchcases , weadopt thedirected notation foredges ,(x;y).Ifthegraph isundirected, then eachofitsedges should bethought ofasexisting inboth directions: (x;y)and(y;x).
3⌘4⌘S.Dasgupta, C.H.Papadimitriou, andU.V.Vazirani 95 Figure 3.3Finding allnodes reachable from aparticular node . procedure explore(G;v) Input: G=(V;E)isagraph;v2V Output: visited(u)issettotrueforallnodesureachable fromv visited(v)=true previsit( v) foreachedge (v;u)2E: ifnotvisited(u):explore(u) postvisit( v) More immediately ,weneed toconrm thatexplore alwaysworks correctly .Itcertainly does notventure toofar,because itonly moves from nodes totheir neighbors andcantherefore never jump toaregion that isnotreachable fromv.But does itnd allvertices reachable fromv?Well,ifthere issomeuthat itmisses ,choose anypath fromvtou,andlook atthe lastvertex onthat path that theprocedure actually visited. Call thisnodez,andletwbethe node immediately after itonthesame path. zw v u Sozwasvisited butwwasnot. This isacontradiction: while theexplore procedure wasat nodez,itwould havenoticedwandmoved ontoit. Incidentally ,thispattern ofreasoning arises often inthestudy ofgraphs andisinessence astreamlined induction. Amore formal inductive proof would start byframing ahypothesis , suchasforanyk0,allnodes withinkhops fromvgetvisited. The base case isasusual trivial, sinceviscertainly visited. And thegeneral caseshowing that ifallnodeskhops awayarevisited, then soareallnodesk+1hops awayis precisely thesame point wejust argued. Figure 3.4shows theresult ofrunningexplore onourearlier example graph, starting atnodeA,and breaking tiesinalphabetical order whenever there isachoice ofnodes to visit. The solid edges arethose that were actually traversed, eachofwhic hwaselicited by acalltoexplore andledtothediscovery ofanew vertex. Forinstance ,whileBwasbeing visited, theedgeBEwasnoticed and, sinceEwasasyetunknown, wastraversed viaa calltoexplore (E).These solid edges form atree (aconnected graph with nocycles)andare therefore called treeedges .The dotted edges were ignored because they ledbacktofamiliar terrain, tovertices previously visited. They arecalled backedges .
3⌘5⌘96 Algorithms Figure 3.4Theresult ofexplore (A)onthegraph ofFigure 3.2. IE JCFBA D G H Figure 3.5Depth-rst searc h. procedure dfs(G) forallv2V: visited(v)=false forallv2V: ifnotvisited(v):explore(v) 3.2.2 Depth-rst search Theexplore procedure visits only theportion ofthegraph reachable from itsstarting point. Toexamine therestofthegraph, weneed torestart theprocedure elsewhere ,atsome vertex that hasnotyetbeen visited. The algorithm ofFigure 3.5,called depth-r stsearc h(DFS), does thisrepeatedly until theentire graph hasbeen traversed. The rst step inanalyzing therunning time ofDFS istoobserve that eachvertex is explore 'djustonce,thanks tothevisited array(the chalk marks). During theexploration ofavertex, there arethefollowing steps: 1.Some xed amount ofworkmarking thespot asvisited, andthepre/postvisit . 2.Aloop inwhic hadjacent edges arescanned, toseeifthey lead somewhere new. This loop takes adifferent amount oftime foreachvertex, solet'sconsider allvertices to- gether .The total work done instep 1isthenO(jVj).Instep 2,over thecourse oftheentire DFS,eachedgefx;yg2Eisexamined exactly twice ,once duringexplore(x)andonce dur- ingexplore(y).Theoverall time forstep 2isthereforeO(jEj)andsothedepth-rst searc h
3⌘6⌘S.Dasgupta, C.H.Papadimitriou, andU.V.Vazirani 97 Figure 3.6(a)A12-node graph. (b)DFS searc hforest. (a) A B C D E F G H I J K L(b)A B E I J G KF C D H L1,10 2,34,9 5,8 6,711,22 23,24 12,21 13,20 14,17 15,1618,19 hasarunning time ofO(jVj+jEj),linear inthesize ofitsinput. This isasefcient aswe could possibly hope for,since ittakes thislong even justtoread theadjacency list. Figure 3.6shows theoutcome ofdepth-rst searc hona12-node graph, once again break- ingtiesalphabetically (ignore thepairs ofnumbers forthetime being). Theouter loop ofDFS callsexplore three times ,onA,C,and nallyF.Asaresult, there arethree trees ,each rooted atoneofthese starting points .Together they constitute aforest . 3.2.3 Connectivity inundirected graphs Anundirected graph isconnected ifthere isapath between anypair ofvertices .The graph ofFigure 3.6isnotconnected because ,forinstance ,there isnopath fromAtoK.However ,it does havethree disjoint connected regions ,corresponding tothefollowing sets ofvertices: fA;B;E;I;JgfC;D;G;H;K;LgfFg These regions arecalled connected components :eachofthem isasubgraph that isinternally connected buthasnoedges totheremaining vertices .Whenexplore isstarted ataparticular vertex, itidenties precisely theconnected component containing that vertex. And eachtime theDFS outer loop callsexplore ,anew connected component ispickedout. Thus depth-rst searc histrivially adapted tocheckifagraph isconnected and, more generally ,toassign eachnodevanintegerccnum [v]identifying theconnected component to whic hitbelongs .Allittakes is procedure previsit (v) ccnum[v]=cc whereccneeds tobeinitialized tozero andtobeincremented eachtime theDFS procedure callsexplore .
3⌘7⌘98 Algorithms 3.2.4 Previsit and postvisit orderings Wehaveseen how depth-rst searc ha fewunassuming lines ofcodeis able touncover the connectivity structure ofanundirected graph injustlinear time.Butitisfarmore versatile than this.Inorder tostretc hitfurther ,wewillcollect alittle more information during theex- ploration process: foreachnode ,wewillnote down thetimes oftwoimportant events ,themo- ment ofrst discovery (corresponding toprevisit )andthat ofnal departure (postvisit ). Figure 3.6shows these numbers forourearlier example ,inwhic hthere are24events .The fth event isthediscovery ofI.The21stevent consists ofleavingDbehind forgood. One waytogenerate arrayspreandpost with these numbers istodene asimple counter clock ,initially setto1,whic hgets updated asfollows . procedure previsit (v) pre[v]=clock clock=clock+1 procedure postvisit (v) post[v]=clock clock=clock+1 These timings willsoon take onlarger signicance .Meanwhile ,youmight havenoticed from Figure 3.4that: Property Foranynodesuandv,thetwointervals [pre(u);post(u)]and[pre(v);post(v)]are either disjoint oroneiscontained within theother . Why? Because [pre(u);post(u)]isessentially thetime during whic hvertexuwasonthe stack.Thelast-in, rst-out beha viorofastackexplains therest. 3.3 Depth-rst search indirected graphs 3.3.1 Types ofedges Our depth-rst searc halgorithm canberunverbatim ondirected graphs ,taking care totra- verse edges only intheir prescribed directions .Figure 3.7shows anexample andthesearc h tree that results when vertices areconsidered inlexicographic order . Infurther analyzing thedirected case,ithelps tohaveterminology forimportant relation- ships between nodes ofatree.Aistherootofthesearc htree; everything elseisitsdescendant . Similarly ,Ehasdescendants F,G,andH,andconversely ,isanancestor ofthese three nodes . Thefamily analogy iscarried further:Cistheparent ofD,whic hisitschild. Forundirected graphs wedistinguished between tree edges and nontree edges .Inthe directed case,there isaslightly more elaborate taxonomy:
3⌘8⌘S.Dasgupta, C.H.Papadimitriou, andU.V.Vazirani 99 Figure 3.7DFS onadirected graph. A B C F D E G HA HB C E D F G12,15 13,141,16 2,11 4,7 5,68,93,10 Treeedges areactually part oftheDFS forest. Forward edges lead from anode toanonc hild descendant intheDFS tree. Backedges lead toanancestor intheDFS tree. Cross edges lead toneither descendant norancestor; they therefore lead toanode that hasalready been completely explored (that is,already postvisited).BackForward CrossTreeA B C DDFS tree Figure 3.7hastwoforwardedges ,twobackedges ,andtwocross edges .Can youspot them? Ancestor and descendant relationships ,aswell asedge types ,canberead offdirectly frompre andpost numbers .Because ofthedepth-rst exploration strategy ,vertexuisan ancestor ofvertexvexactly inthose cases whereuisdiscovered rst andvisdiscovered duringexplore(u).This istosaypre(u)<pre(v)<post(v)<post(u),whic hwecan depict pictorially astwonested intervals: u v v u Thecase ofdescendants issymmetric ,sinceuisadescendant ofvifandonly ifvisanan- cestor ofu.And since edge categories arebased entirely onancestor -descendant relationships ,
3⌘9⌘100 Algorithms itfollows that they,too,canberead offfrompre andpost numbers .Here isasummary of thevarious possibilities foranedge(u;v): pre/post ordering for(u;v) Edge type u v v uTree/forw ard v u u vBack v u v uCross Youcanconrm eachofthese characterizations byconsulting thediagram ofedge types .Do youseewhy noother orderings arepossible? 3.3.2 Directed acyclic graphs Acycle inadirected graph isacircular pathv0!v1!v2!!vk!v0.Figure 3.7has quite afewofthem, forexample ,B!E!F!B.Agraph without cyclesisacyclic .Itturns outwecantestforacyclicity inlinear time,with asingle depth-rst searc h. Property Adirected graph hasacycleifand only ifitsdepth-rst searc hreveals aback edge. Proof .One direction isquite easy: if(u;v)isabackedge,then there isacycleconsisting of thisedge together with thepath fromvtouinthesearc htree. Conversely ,ifthegraph hasacyclev0!v1!!vk!v0,look attherstnode onthis cycletobediscovered (the node with thelowestpre number). Suppose itisvi.Alltheother vjonthecyclearereachable from itandwilltherefore beitsdescendants inthesearc htree. Inparticular ,theedgevi1!vi(orvk!v0ifi=0)leads from anode toitsancestor andis thus bydenition abackedge. Directed acyclic graphs ,ordags forshort, come upallthetime.They aregood formodeling relations likecausalities ,hierarc hies,andtemporal dependencies .Forexample ,suppose that youneed toperform many tasks ,butsome ofthem cannot begin until certain others are completed (you havetowakeupbefore youcangetoutofbed; youhavetobeoutofbed, but notyetdressed, totake ashower; andsoon). The question then is,what isavalid order in whic htoperform thetasks? Suchconstraints areconveniently represented byadirected graph inwhic heachtask is anode ,and there isanedge fromutovifuisaprecondition forv.Inother words ,before performing atask, allthetasks pointing toitmust becompleted. Ifthis graph hasacycle, there isnohope: noordering canpossibly work. Ifontheother hand thegraph isadag, wewould likeifpossible tolinearize (ortopologicall ysort)it,toorder thevertices oneafter theother insuchawaythat eachedge goes from anearlier vertex toalater vertex, sothat allprecedence constraints aresatised. InFigure 3.8, forinstance ,onevalid ordering is B;A;D;C;E;F.(Can youspot theother three?)
3⌘10⌘S.Dasgupta, C.H.Papadimitriou, andU.V.Vazirani 101 Figure 3.8Adirected acyclicgraph with onesource ,twosinks ,andfour possible lineariza- tions . A BC DE F What types ofdags canbelinearized? Simple: Allofthem .And once again depth-rst searc htells usexactly how todoit:simply perform tasks indecreasing order oftheirpost numbers .After all,theonly edges (u;v)inagraph forwhic hpost(u)<post(v)areback edges (recall thetable ofedge types onpage 100)and wehaveseen that adagcannot have backedges .Therefore: Property Inadag,every edge leads toavertex with alowerpost number . This gives usalinear -time algorithm forordering thenodes ofadag.And, together with ourearlier observations ,ittells usthat three rather different-sounding propertiesacyc licity , linearizability ,andtheabsence ofbackedges during adepth-rst searc hare infactoneand thesame thing . Since adagislinearized bydecreasing post numbers ,thevertex with thesmallestpost number comes lastinthislinearization, anditmust beasinkno outgoing edges .Symmet- rically ,theonewith thehighestpost isasource ,anode with noincoming edges . Property Every daghasatleast onesource andatleast onesink. Theguaranteed existence ofasource suggests analternative approac htolinearization: Findasource ,output it,anddelete itfrom thegraph. Repeat until thegraph isempty . Can youseewhy thisgenerates avalid linearization foranydag? What happens ifthegraph hascycles?And, how canthisalgorithm beimplemented inlinear time? (Exercise 3.14.) 3.4 Strongly connected components 3.4.1 Dening connectivity fordirected graphs Connectivity inundirected graphs ispretty straightforw ard: agraph that isnotconnected canbedecomposed inanatural andobvious manner into several connected components (Fig-
3⌘11⌘102 Algorithms Figure 3.9(a)Adirected graph anditsstrongly connected components .(b)Themeta-graph. (a) A D EC FB H G K LJ I(b) A B,E C,F DJ,K,LG,H,I ure3.6isacase inpoint). AswesawinSection 3.2.3, depth-rst searc hdoes this handily , with eachrestart marking anew connected component. Indirected graphs ,connectivity ismore subtle .Insome primitive sense ,thedirected graph ofFigure 3.9(a) isconnectedit can't bepulled apart, sotospeak, without breaking edges .Butthis notion ishardly interesting orinformative .The graph cannot beconsidered connected, because forinstance there isnopath fromGtoBorfromFtoA.Theright wayto dene connectivity fordirected graphs isthis: Two nodesuandvofadirected graph areconnected ifthere isapath fromutov andapath fromvtou. This relation partitions Vinto disjoint sets (Exercise 3.30) that wecallstrongl yconnected components .Thegraph ofFigure 3.9(a) hasveofthem. Now shrink eachstrongly connected component down toasingle meta-node ,anddrawan edge from onemeta-node toanother ifthere isanedge (inthesame direction) between their respective components (Figure 3.9(b)). Theresulting meta-graph must beadag.Thereason is simple: acyclecontaining several strongly connected components would merge them allinto asingle ,strongly connected component. Restated, Property Every directed graph isadagofitsstrongly connected components . This tells ussomething important: The connectivity structure ofadirected graph istwo- tiered. Atthetoplevel wehaveadag,whic hisarather simple structurefor instance ,it
3⌘12⌘S.Dasgupta, C.H.Papadimitriou, andU.V.Vazirani 103 canbelinearized. Ifwewantner detail, wecanlook inside oneofthenodes ofthisdagand examine thefull-edged strongly connected component within. 3.4.2 Anefcient algorithm The decomposition ofadirected graph into itsstrongly connected components isvery infor - mative and useful. Itturns out, fortunately ,that itcanbefound inlinear time bymaking further useofdepth-rst searc h.Thealgorithm isbased onsome properties wehavealready seen butwhic hwewillnow pinpoint more closely . Property 1Iftheexplore subroutine isstarted atnodeu,then itwillterminate precisely when allnodes reachable fromuhavebeen visited. Therefore ,ifwecallexplore onanode that liessomewhere inasink strongly connected component (astrongly connected component that isasink inthemeta-graph), then wewill retrieve exactly that component. Figure 3.9hastwosink strongly connected components . Startingexplore atnodeK,forinstance ,will completely traverse thelarger ofthem and then stop. This suggests awayofnding onestrongly connected component, butstillleavesopen two major problems: (A)how dowend anode that weknow forsure liesinasink strongly con- nected component and(B)how dowecontinue once thisrst component hasbeen discovered? Let'sstart with problem (A).There isnotaneasy,direct waytopickoutanode that is guaranteed tolieinasink strongly connected component. Butthere isawaytogetanode in asource strongly connected component. Property 2Thenode that receives thehighestpost number inadepth-rst searc hmust lie inasource strongly connected component. This follows from thefollowing more general property . Property 3IfCandC0arestrongly connected components ,andthere isanedge from anode inCtoanode inC0,then thehighestpost number inCisbigger than thehighestpost number inC0. Proof .Inproving Property 3,there aretwocases toconsider .Ifthedepth-rst searc hvisits component Cbefore component C0,then clearly allofCandC0willbetraversed before the procedure gets stuck(seeProperty 1).Therefore therst node visited inCwillhaveahigher post number than anynode ofC0.Ontheother hand, ifC0gets visited rst, then thedepth- rst searc hwillgetstuckafter seeing allofC0butbefore seeing anyofC,inwhic hcase the property follows immediately . Property 3canberestated assaying that thestrongl yconnected components canbelin- earized byarranging them indecreasing order oftheir highestpost number s.This isagen- eralization ofourearlier algorithm forlinearizing dags; inadag,eachnode isasingleton strongly connected component. Property 2helps usnd anode inthesource strongly connected component ofG.How- ever,what weneed isanode inthesink component. Our means seem tobetheopposite of
3⌘13⌘104 Algorithms Figure 3.10 Therever seofthegraph from Figure 3.9. A D EC FB H G K LJ IA B,E C,F DJ,K,LG,H,I ourneeds! But consider therever segraphGR,thesame asGbutwith alledges reversed (Figure 3.10).GRhasexactly thesame strongly connected components asG(why?). So,ifwe doadepth-rst searc hofGR,thenode with thehighestpost number willcome from asource strongly connected component inGR,whic histosayasink strongly connected component in G.Wehavesolved problem (A)! Onw ardtoproblem (B).How dowecontinue after therst sink component isidentied? Thesolution isalso provided byProperty 3.Once wehavefound therst strongly connected component and deleted itfrom thegraph, thenode with thehighestpost number among those remaining willbelong toasink strongly connected component ofwhatever remains of G.Therefore wecankeep using thepost numbering from ourinitial depth-rst searc honGR tosuccessively output thesecond strongly connected component, thethird strongly connected component, andsoon.Theresulting algorithm isthis. 1.Run depth-rst searc honGR. 2.Run theundirected connected components algorithm (from Section 3.2.3) onG,anddur- ingthedepth-rst searc h,process thevertices indecreasing order oftheirpost numbers from step 1. This algorithm islinear -time ,only theconstant inthelinear term isabout twice that of straight depth-rst searc h.(Question: How does oneconstruct anadjacency listrepresen- tation ofGRinlinear time? And how,inlinear time,does oneorder thevertices ofGby decreasing post values?)
3⌘14⌘S.Dasgupta, C.H.Papadimitriou, andU.V.Vazirani 105 Let'srunthis algorithm onthegraph ofFigure 3.9. Ifstep 1considers vertices inlex- icographic order ,then theordering itsets upforthesecond step (namely ,decreasing post numbers inthedepth-rst searc hofGR)is:G;I;J;L;K;H;D;C;F;B;E;A.Then step 2peels offcomponents inthefollowing sequence:fG;H;I;J;K;Lg;fDg;fC;Fg;fB;Eg;fAg. Crawling fast Allthis assumes that thegraph isneatly given tous,with vertices numbered 1tonand edges tuckedinadjacency lists.Therealities oftheWorld WideWebarevery different. The nodes oftheWebgraph arenotknown inadvance ,and they havetobediscovered oneby oneduring theprocess ofsearc h.And, ofcourse ,recursion isoutofthequestion. Still, crawling theWebisdone byalgorithms very similar todepth-rst searc h.An explicit stackismaintained, containing allnodes that havebeen discovered (asendpoints of hyperlinks) butnotyetexplored. Infact, thisstac kisnotexactly alast-in, rst-out list. It gives highest priority nottothenodes that were inserted most recently (nor theones that were inserted earliest, that would beabreadth-r stsearc h,seeChapter 4),buttotheones that look most interestinga heuristic criterion whose purpose istokeep thestackfrom overowing and, intheworst case,toleaveunexplored only nodes that arevery unlikely to lead tovast new expanses . Infact, crawling istypically done bymany computers runningexplore simultaneously: eachonetakes thenext node tobeexplored from thetopofthestack,downloads thehttp le(the kind ofWebles that point toeachother), andscans itforhyperlinks .Butwhen a new http document isfound attheendofahyperlink, norecursive calls aremade: instead, thenew vertex isinserted inthecentral stack. Butonequestion remains: When weseeanew document, how doweknow that itis indeed new,that wehavenotseen itbefore inourcrawl?And how dowegive itaname ,so itcanbeinserted inthestackandrecorded asalready seen? Theanswer isbyhashing . Incidentally ,researc hers haverunthestrongly connected components algorithm onthe Webandhavediscovered some very interesting structure .
3⌘15⌘106 Algorithms Exercises 3.1. Perform adepth-rst searc honthefollowing graph; whenever there' sachoice ofvertices ,pick theonethat isalphabetically rst. Classify eachedge asatree edge orbackedge ,andgive the preandpost number ofeachvertex. A B C D E F G H I 3.2. Perform depth-rst searc honeachofthefollowing graphs; whenever there' sachoice ofvertices , picktheonethat isalphabetically rst. Classify eachedge asatree edge ,forwardedge ,back edge ,orcross edge ,andgive thepreandpost number ofeachvertex. (a) FA C B E D G H(b) FCB A H G ED 3.3. Run theDFS-based topological ordering algorithm onthefollowing graph. Whenever youhave achoice ofvertices toexplore ,alwayspicktheonethat isalphabetically rst. A C ED F BG H (a)Indicate thepreandpost numbers ofthenodes . (b)What arethesources andsinks ofthegraph? (c)What topological ordering isfound bythealgorithm? (d)How many topological orderings does thisgraph have? 3.4. Run thestrongly connected components algorithm onthefollowing directed graphsG.When doing DFS onGR:whenever there isachoice ofvertices toexplore ,alwayspicktheonethat is alphabetically rst.
3⌘16⌘S.Dasgupta, C.H.Papadimitriou, andU.V.Vazirani 107 (i) A B E G H IC D F J(ii) A B C D E F G H I Ineachcase answer thefollowing questions . (a)Inwhat order arethestrongly connected components (SCCs) found? (b)Whic haresource SCCs andwhic haresink SCCs? (c)Drawthemetagraph (eachmeta-node isanSCC ofG). (d)What istheminimum number ofedges youmust add tothis graph tomake itstrongly connected? 3.5. The rever seofadirected graphG=(V;E)isanother directed graphGR=(V;ER)onthesame vertex set,butwith alledges reversed; that is,ER=f(v;u):(u;v)2Eg. Give alinear -time algorithm forcomputing thereverse ofagraph inadjacency listformat. 3.6. Inanundirected graph, thedegreed(u)ofavertexuisthenumber ofneighborsuhas,orequiv- alently ,thenumber ofedges incident upon it.Inadirected graph, wedistinguish between the indegreedin(u),whic histhenumber ofedges intou,and theoutdegreedout(u),thenumber of edges leavingu. (a)Show that inanundirected graph,P u2Vd(u)=2jEj. (b)Usepart (a)toshow that inanundirected graph, there must beaneven number ofvertices whose degree isodd. (c)Does asimilar statement hold forthenumber ofvertices with oddindegree inadirected graph? 3.7. Abipartite graph isagraphG=(V;E)whose vertices canbepartitioned intotwosets(V=V1[V2 andV1\V2=;)suchthat there arenoedges between vertices inthesame set(forinstance ,if u;v2V1,then there isnoedge betweenuandv). (a)Give alinear -time algorithm todetermine whether anundirected graph isbipartite . (b)There aremany other waystoformulate this property .Forinstance ,anundirected graph isbipartite ifandonly ifitcanbecolored with justtwocolors . Prove thefollowing formulation: anundirected graph isbipartite ifandonly ifitcontains nocyclesofoddlength. (c)Atmost how many colors areneeded tocolor inanundirected graph with exactly oneodd- length cycle?
3⌘17⌘108 Algorithms 3.8. Pouring water .Wehavethree containers whose sizes are10pints ,7pints ,and 4pints ,re- spectively .The 7-pint and4-pint containers start outfullofwater,butthe10-pint container is initially empty .Weareallowed onetype ofoperation: pouring thecontents ofonecontainer into another ,stopping only when thesource container isempty orthedestination container isfull. Wewanttoknow ifthere isasequence ofpourings that leavesexactly 2pints inthe7-or4-pint container . (a)Model thisasagraph problem: give aprecise denition ofthegraph involved andstate the specic question about thisgraph that needs tobeanswered. (b)What algorithm should beapplied tosolve theproblem? (c)Findtheanswer byapplying thealgorithm. 3.9. Foreachnodeuinanundirected graph, lettwodegree [u]bethesum ofthedegrees ofu'sneigh- bors.Show how tocompute theentire arrayoftwodegree []values inlinear time,given agraph inadjacency listformat. 3.10. Rewrite theexplore procedure (Figure 3.3)sothat itisnon-recursive (that is,explicitly usea stack).Thecalls toprevisit andpostvisit should bepositioned sothat they havethesame effect asintherecursive procedure . 3.11. Design alinear -time algorithm whic h,given anundirected graphGandaparticular edgeeinit, determines whetherGhasacyclecontaining e. 3.12. Either prove orgive acounterexample: iffu;vgisanedge inanundirected graph, andduring depth-rst searc hpost(u)<post(v),thenvisanancestor ofuintheDFS tree. 3.13. Undirected vs.directed connectivity . (a)Prove that inanyconnected undirected graphG=(V;E)there isavertexv2Vwhose removal leavesGconnected. (Hint: Consider theDFS searc htree forG.) (b)Give anexample ofastrongly connected directed graphG=(V;E)suchthat, forevery v2V,removingvfromGleavesadirected graph that isnotstrongly connected. (c)Inanundirected graph with 2connected components itisalwayspossible tomake thegraph connected byadding only oneedge .Give anexample ofadirected graph with twostrongly connected components suchthat noaddition ofoneedge canmake thegraph strongly con- nected. 3.14. The chapter suggests analternative algorithm forlinearization (topological sorting), whic hre- peatedly removes source nodes from thegraph (page 101). Show that this algorithm canbe implemented inlinear time. 3.15. The police department inthecityofComputopia hasmade allstreets one-w ay.Themayorcon- tends that there isstill awaytodrive legally from any intersection inthecity toany other intersection, buttheopposition isnotconvinced. Acomputer program isneeded todetermine whether themayorisright. However ,thecityelections arecoming upsoon, and there isjust enough time torunalinear -time algorithm. (a)Formulate this problem graph-theoretically ,and explain why itcanindeed besolved in linear time.
3⌘18⌘S.Dasgupta, C.H.Papadimitriou, andU.V.Vazirani 109 (b)Suppose itnow turns outthat themayor'soriginal claim isfalse .Shenext claims something weaker: ifyoustart driving from town hall, navigating one-w aystreets ,then nomatter where youreach,there isalwaysawaytodrive legally backtothetown hall. Formulate this weaker property asagraph-theoretic problem, and carefully show how ittoocanbe checkedinlinear time. 3.16. Suppose aCScurriculum consists ofncourses ,allofthem mandatory .Theprerequisite graphG hasanode foreachcourse ,andanedge from coursevtocoursewifandonly ifvisaprerequisite forw.Findanalgorithm that works directly with this graph representation, andcomputes the minimum number ofsemesters necessary tocomplete thecurriculum (assume that astudent cantake anynumber ofcourses inonesemester). Therunning time ofyour algorithm should be linear . 3.17. Innite paths .LetG=(V;E)beadirected graph with adesignated start vertexs2V,aset VGVofgood vertices ,andasetVBVofbad vertices .Aninnite tracepofGisaninnite sequencev0v1v2ofverticesvi2Vsuchthat (1)v0=s,and(2)foralli0,(vi;vi+1)2E.That is,pisaninnite path inGstarting atvertexs.Since thesetVofvertices isnite ,every innite trace ofGmust visit some vertices innitely often. (a)Ifpisaninnite trace ,letInf(p)Vbethesetofvertices that occur innitely often inp. Show that Inf(p)isasubset ofastrongly connected component ofG. (b)Describe analgorithm that determines ifGhasaninnite trace . (c)Describe analgorithm that determines ifGhasaninnite trace that visits some good vertex inVGinnitely often. (d)Describe analgorithm that determines ifGhasaninnite trace that visits some good vertex inVGinnitely often, butvisits nobadvertex inVBinnitely often. 3.18. Youaregiven abinary treeT=(V;E)(inadjacency listformat), along with adesignated root noder2V.Recall thatuissaid tobeanancestor ofvintherooted tree,ifthepath fromrtov inTpasses throughu. Youwish topreprocess thetree sothat queries oftheform isuanancestor ofv?canbe answered inconstant time.The preprocessing itself should take linear time.How canthis be done? 3.19. Asintheprevious problem, youaregiven abinary treeT=(V;E)with designated root node .In addition, there isanarrayx[]with avalue foreachnode inV.Dene anew arrayz[]asfollows: foreachu2V, z[u]=themaximum ofthex-values associated withu'sdescendants . Give alinear -time algorithm whic hcalculates theentirez-arra y. 3.20. Youaregiven atreeT=(V;E)along with adesignated root noder2V.Theparent ofanynode v6=r,denotedp(v),isdened tobethenode adjacent tovinthepath fromrtov.Byconvention, p(r)=r.Fork>1,denepk(v)=pk1(p(v))andp1(v)=p(v)(sopk(v)isthekthancestor ofv). Eachvertexvofthetree hasanassociated non-negative integer labell(v).Give alinear -time algorithm toupdate thelabels ofallthevertices inTaccording tothefollowing rule:lnew(v)= l(pl(v)(v)). 3.21. Give alinear -time algorithm tond anodd-length cycleinadirected graph. (Hint: Firstsolve thisproblem under theassumption that thegraph isstrongly connected.)
3⌘19⌘110 Algorithms 3.22. Give anefcient algorithm whic htakes asinput adirected graphG=(V;E),and determines whether ornotthere isavertexs2Vfrom whic hallother vertices arereachable . 3.23. Give anefcient algorithm that takes asinput adirected acyclicgraphG=(V;E),and two verticess;t2V,andoutputs thenumber ofdifferent directed paths fromstotinG. 3.24. Give alinear -time algorithm forthefollowing task. Input: Adirected acyclicgraphG Question: DoesGcontain adirected path that touchesevery vertex exactly once? 3.25. Youaregiven adirected graph inwhic heachnodeu2Vhasanassociated pricepuwhic hisa positive integer .Dene thearraycost asfollows: foreachu2V, cost[u]=price ofthecheapest node reachable fromu(includinguitself). Forinstance ,inthegraph below (with prices shown foreachvertex), thecost values ofthe nodesA;B;C;D;E;Fare2;1;4;1;4;5,respectively . A BC DE F 1 54 6 2 3 Yourgoal istodesign analgorithm that llsintheentirecost array(i.e.,forallvertices). (a)Give alinear -time algorithm that works fordirected acyclic graphs .(Hint: Handle the vertices inaparticular order .) (b)Extend thistoalinear -time algorithm that works foralldirected graphs .(Hint: Recall the two-tiered structure ofdirected graphs .) 3.26. AnEulerian tour inanundirected graph isacyclethat isallowed topass through eachvertex multiple times ,butmust useeachedge exactly once. This simple concept wasused byEuler in1736 tosolve thefamous Konigsberg bridge problem, whic hlaunc hedtheeld ofgraph theory .The cityofKonigsberg (now called Kaliningrad, in western Russia) isthemeeting point oftworivers with asmall island inthemiddle .There are seven bridges across therivers ,andapopular recreational question ofthetime wastodetermine whether itispossible toperform atour inwhic heachbridge iscrossed exactl yonce. Euler formulated therelevant information asagraph with four nodes (denoting land masses) andseven edges (denoting bridges), asshown here.
3⌘20⌘S.Dasgupta, C.H.Papadimitriou, andU.V.Vazirani 111 Southern bankNorthern bank Small islandBig island Notice anunusual feature ofthisproblem: multiple edges between certain pairs ofnodes . (a)Show that anundirected graph hasanEulerian tour ifandonly ifallitsvertices haveeven degree .Conc lude that there isnoEulerian tour oftheKonigsberg bridges . (b)AnEulerian path isapath whic huses eachedge exactly once.Can yougive asimilar if-and-only-if characterization ofwhic hundirected graphs haveEulerian paths? (c)Can yougive ananalog ofpart (a)fordirected graphs? 3.27. Two paths inagraph arecalled edge-disjoint ifthey havenoedges incommon. Show that inany undirected graph, itispossible topair upthevertices ofodddegree andndpaths between each suchpair sothat allthese paths areedge-disjoint. 3.28. Inthe2SATproblem, youaregiven asetofclauses ,where eachclause isthedisjunction (OR)of twoliterals (aliteral isaBoolean variable orthenegation ofaBoolean variable). Youarelooking forawaytoassign avaluetrue orfalse toeachofthevariables sothat allclauses aresatised that is,there isatleast onetrue literal ineachclause .Forexample ,here' saninstance of2SAT: (x1_x2)^(x1_x3)^(x1_x2)^(x3_x4)^(x1_x4): This instance hasasatisfying assignment: setx1,x2,x3,andx4totrue ,false ,false ,and true ,respectively . (a)Arethere other satisfying truth assignments ofthis2SATformula? Ifso,ndthem all. (b)Give aninstance of2SATwith four variables ,andwith nosatisfying assignment. The purpose ofthisproblem istolead youtoawayofsolving 2SATefciently byreducing itto theproblem ofnding thestrongly connected components ofadirected graph. Given aninstance Iof2SATwithnvariables andmclauses ,construct adirected graphGI=(V;E)asfollows . GIhas2nnodes ,oneforeachvariable anditsnegation. GIhas2medges: foreachclause ( _ )ofI(where ; areliterals),GIhasanedge from from thenegation of to ,andonefrom thenegation of to . Note that theclause ( _ )isequivalent toeither oftheimplications ) or ) .Inthis sense ,GIrecords allimplications inI. (c)Carry outthisconstruction fortheinstance of2SATgiven above ,andfortheinstance you constructed in(b).
3⌘21⌘112 Algorithms (d)Show that ifGIhasastrongly connected component containing bothxandxforsome variablex,thenIhasnosatisfying assignment. (e)Now show theconverse of(d):namely ,that ifnone ofGI'sstrongly connected components contain both aliteral anditsnegation, then theinstanceImust besatisable .(Hint: As- sign values tothevariables asfollows: repeatedly pickasink strongly connected component ofGI.Assign valuetrue toallliterals inthesink, assignfalse totheir negations ,and delete allofthese .Show that thisends updiscovering asatisfying assignment.) (f)Conc lude that there isalinear -time algorithm forsolving 2SAT. 3.29. LetSbeanite set.Abinary relation onSissimply acollectionRofordered pairs (x;y)2SS. Forinstance ,Smight beasetofpeople ,andeachsuchpair(x;y)2Rmight mean xknowsy. Anequivalence relation isabinary relation whic hsatises three properties: Reexivity: (x;x)2Rforallx2S Symmetry: if(x;y)2Rthen(y;x)2R Transitivity: if(x;y)2Rand(y;z)2Rthen(x;z)2R Forinstance ,thebinary relation has thesame birthda yasisanequivalence relation, whereas isthefather ofisnot,since itviolates allthree properties . Show that anequivalence relation partitions setSinto disjoint groupsS1;S2;:::;Sk(inother words ,S=S1[S2[[SkandSi\Sj=;foralli6=j)suchthat: Any twomembers ofagroup arerelated, that is,(x;y)2Rforanyx;y2Si,foranyi. Members ofdifferent groups arenotrelated, that is,foralli6=j,forallx2Siandy2Sj, wehave(x;y)62R. (Hint: Represent anequivalence relation byanundirected graph.) 3.30. Onpage 102, wedened thebinary relation connected onthesetofvertices ofadirected graph. Show that thisisanequivalence relation (seeExercise 3.29), andconclude that itpartitions the vertices intodisjoint strongly connected components . 3.31. Biconnected components LetG=(V;E)beanundirected graph. Foranytwoedgese;e02E,we'll sayee0ifeithere=e0orthere isa(simple) cyclecontaining botheande0. (a)Show thatisanequivalence relation (recall Exercise 3.29) ontheedges . The equivalence classes into whic hthis relation partitions theedges arecalled thebiconnected components ofG.Abridge isanedge whic hisinabiconnected component allbyitself . Aseparating vertex isavertex whose removal disconnects thegraph. (b)Partition theedges ofthegraph below intobiconnected components ,andidentify thebridges andseparating vertices .
3⌘22⌘S.Dasgupta, C.H.Papadimitriou, andU.V.Vazirani 113 C D A B EF G O N M L K JI H Notonly dobiconnected components partition theedges ofthegraph, they also almost partition thevertices inthefollowing sense . (c)Associate with eachbiconnected component allthevertices that areendpoints ofitsedges . Show that thevertices corresponding totwodifferent biconnected components areeither disjoint orintersect inasingle separating vertex. (d)Collapse eachbiconnected component into asingle meta-node ,andretain individual nodes foreachseparating vertex. (Sothere areedges between eachcomponent-node anditssep- arating vertices .)Show that theresulting graph isatree. DFS canbeused toidentify thebiconnected components ,bridges ,andseparating vertices ofa graph inlinear time. (e)Show that therootoftheDFS tree isaseparating vertex ifandonly ifithasmore than one child inthetree. (f)Show that anon-root vertexvoftheDFS tree isaseparating vertex ifandonly ifithasa childv0none ofwhose descendants (including itself) hasabackedge toaproper ancestor of v. (g)Foreachvertexudene: low(u)=min pre(u) pre(w)where (v;w)isabackedge forsome descendant vofu Show that theentire arrayoflowvalues canbecomputed inlinear time. (h)Show how tocompute allseparating vertices ,bridges ,and biconnected components ofa graph inlinear time.(Hint: Uselow toidentify separating vertices ,andrunanother DFS with anextra stackofedges toremove biconnected components oneatatime.)
